<?php
/**
 * Program
 *
 * PHP version 5
 *
 * @category Class
 * @package  UScreen\Client
 * @author   UScreen Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Publisher API
 *
 * Uscreen Publisher API to controll user data and information
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@uscreen.tv
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * UScreen Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UScreen\Client\Model;

use \ArrayAccess;
use \UScreen\Client\ObjectSerializer;

/**
 * Program Class Doc Comment
 *
 * @category Class
 * @package  UScreen\Client
 * @author   UScreen Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Program implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Program';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'title' => 'string',
        'description' => 'string',
        'part_of_subscription' => 'bool',
        'main_poster_url' => 'string',
        'secondary_poster_url' => 'string',
        'created_at' => 'int',
        'price_cents' => 'int',
        'rental_price_cents' => 'int',
        'rental_period' => 'string',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'title' => null,
        'description' => null,
        'part_of_subscription' => null,
        'main_poster_url' => null,
        'secondary_poster_url' => null,
        'created_at' => null,
        'price_cents' => null,
        'rental_price_cents' => null,
        'rental_period' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'description' => 'description',
        'part_of_subscription' => 'part_of_subscription',
        'main_poster_url' => 'main_poster_url',
        'secondary_poster_url' => 'secondary_poster_url',
        'created_at' => 'created_at',
        'price_cents' => 'price_cents',
        'rental_price_cents' => 'rental_price_cents',
        'rental_period' => 'rental_period',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'part_of_subscription' => 'setPartOfSubscription',
        'main_poster_url' => 'setMainPosterUrl',
        'secondary_poster_url' => 'setSecondaryPosterUrl',
        'created_at' => 'setCreatedAt',
        'price_cents' => 'setPriceCents',
        'rental_price_cents' => 'setRentalPriceCents',
        'rental_period' => 'setRentalPeriod',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'part_of_subscription' => 'getPartOfSubscription',
        'main_poster_url' => 'getMainPosterUrl',
        'secondary_poster_url' => 'getSecondaryPosterUrl',
        'created_at' => 'getCreatedAt',
        'price_cents' => 'getPriceCents',
        'rental_price_cents' => 'getRentalPriceCents',
        'rental_period' => 'getRentalPeriod',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['part_of_subscription'] = isset($data['part_of_subscription']) ? $data['part_of_subscription'] : null;
        $this->container['main_poster_url'] = isset($data['main_poster_url']) ? $data['main_poster_url'] : null;
        $this->container['secondary_poster_url'] = isset($data['secondary_poster_url']) ? $data['secondary_poster_url'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['price_cents'] = isset($data['price_cents']) ? $data['price_cents'] : null;
        $this->container['rental_price_cents'] = isset($data['rental_price_cents']) ? $data['rental_price_cents'] : null;
        $this->container['rental_period'] = isset($data['rental_period']) ? $data['rental_period'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Uscreen system ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Program title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Program description with HTML
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets part_of_subscription
     *
     * @return bool
     */
    public function getPartOfSubscription()
    {
        return $this->container['part_of_subscription'];
    }

    /**
     * Sets part_of_subscription
     *
     * @param bool $part_of_subscription Shows if program is a part of recurring offer
     *
     * @return $this
     */
    public function setPartOfSubscription($part_of_subscription)
    {
        $this->container['part_of_subscription'] = $part_of_subscription;

        return $this;
    }

    /**
     * Gets main_poster_url
     *
     * @return string
     */
    public function getMainPosterUrl()
    {
        return $this->container['main_poster_url'];
    }

    /**
     * Sets main_poster_url
     *
     * @param string $main_poster_url Program main poster image URL
     *
     * @return $this
     */
    public function setMainPosterUrl($main_poster_url)
    {
        $this->container['main_poster_url'] = $main_poster_url;

        return $this;
    }

    /**
     * Gets secondary_poster_url
     *
     * @return string
     */
    public function getSecondaryPosterUrl()
    {
        return $this->container['secondary_poster_url'];
    }

    /**
     * Sets secondary_poster_url
     *
     * @param string $secondary_poster_url Program secondary poster image URL
     *
     * @return $this
     */
    public function setSecondaryPosterUrl($secondary_poster_url)
    {
        $this->container['secondary_poster_url'] = $secondary_poster_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at Date when record was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets price_cents
     *
     * @return int
     */
    public function getPriceCents()
    {
        return $this->container['price_cents'];
    }

    /**
     * Sets price_cents
     *
     * @param int $price_cents One-time purchase price
     *
     * @return $this
     */
    public function setPriceCents($price_cents)
    {
        $this->container['price_cents'] = $price_cents;

        return $this;
    }

    /**
     * Gets rental_price_cents
     *
     * @return int
     */
    public function getRentalPriceCents()
    {
        return $this->container['rental_price_cents'];
    }

    /**
     * Sets rental_price_cents
     *
     * @param int $rental_price_cents Rental price
     *
     * @return $this
     */
    public function setRentalPriceCents($rental_price_cents)
    {
        $this->container['rental_price_cents'] = $rental_price_cents;

        return $this;
    }

    /**
     * Gets rental_period
     *
     * @return string
     */
    public function getRentalPeriod()
    {
        return $this->container['rental_period'];
    }

    /**
     * Sets rental_period
     *
     * @param string $rental_period Rental period
     *
     * @return $this
     */
    public function setRentalPeriod($rental_period)
    {
        $this->container['rental_period'] = $rental_period;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags Program tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


